---
title: "Programa de Prevenci√≥n y Control del Dengue | 2025"
format: 
  dashboard:
    nav-buttons: [twitter, github, facebook]
theme: custom.scss
---

```{r setup}
library(sf)
mapview::mapviewOptions(default = TRUE,
                        basemaps.color.shuffle = FALSE)
load("~/OneDrive/proyects/hotspots_eggs/8.RData/20_oaxaca/betas/20_oaxaca_zinb1_betas.RData")

```


# [**Hotspots de la Transmision de Dengue**]{style="font-size:2pt"}

::: panel-tabset

### [**Oaxaca**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_oaxaca}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Oaxaca de Juarez")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_oaxaca, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_oaxaca,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_oaxaca,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_oaxaca, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_oaxaca, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>



### [**Santiago Pinotepa Nacional**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_pinotepa}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Santiago Pinotepa Nacional")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_pinotepa, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_pinotepa,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_pinotepa,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_pinotepa, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_pinotepa, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>



### [**Juchitan**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_juchitan}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Heroica Ciudad de Juchitan de Zaragoza")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_juchitan, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_juchitan,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_juchitan,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_juchitan, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_juchitan, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>


### [**Salina Cruz**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_salina}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Salina Cruz")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_salina, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_salina,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_salina,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_salina, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_salina, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>


### [**Santo Domingo Tehuantepec**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_tehuantepec}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Santo Domingo Tehuantepec")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_tehuantepec, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_tehuantepec,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_tehuantepec,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_tehuantepec, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_tehuantepec, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>



### [**San Juan Bautista Tuxtepec**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_tuxtepec}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "San Juan Bautista Tuxtepec")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_tuxtepec, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_tuxtepec,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_tuxtepec,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_tuxtepec, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_tuxtepec, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>



### [**Puerto Escondido**]{style="color:#990000"}

<html>
<head>
```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 1px;
    grid-template-columns: 225px 225px 225px 410px;
    grid-template-rows: 95px 95px 95px 130px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 1px;
    padding: 2px;
    font-size: 100%;
  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>
<body>
::: wrapper
::: {.box .a}
```{r hotspots_dengue_puerto_escondido}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "20", 
                                 locality = "Puerto Escondido")

# Step 2. Extract the hotspots ####
hotspots <- hotspotsdata::den_hotspots[loc, ]
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_puerto_escondido, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    dplyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2022 = DENV_2020 +  DENV_2021 + DENV_2022) |>
    dplyr::mutate(DENV_2023_2024 = DENV_2023 +  DENV_2024) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2022 + DENV_2023_2024,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = FALSE)

plotly::ggplotly(plot(result) +
       ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                       axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")) +
        ggplot2::scale_y_discrete(labels = c("2008-2010",
                                             "2011-2014", 
                                             "2015-2017",
                                             "2018-2019",
                                             "2020-2022",
                                             "2023-2024")))
```
:::

::: {.box .c}
```{r power_law_plot_puerto_escondido,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto) +
                  ggplot2::theme(axis.text.y = ggplot2::element_text(size = 8),
                                 axis.text.x = ggplot2::element_text(size = 8),
                       axis.title = ggplot2::element_text(size = 8),
                      plot.margin = ggplot2::unit(c(0,0,0,0), "cm")))  |> 
  plotly::layout(showlegend = FALSE)






```
:::

::: {.box .d}
```{r gauge_blocks_puerto_escondido,fig.align = "center", out.height='90%', out.width = '90%'}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_puerto_escondido, fig.align = "center", out.height='90%', out.width = '90%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_puerto_escondido, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::
</body>
</html>




:::


# [**Hotspots del Vector**]{style="font-size:2pt"}

::: panel-tabset

### [**Oaxaca**]{style="color:#990000"}

```{r vector_hotspots_oaxaca, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20067_oaxaca_1419_zinb1,
                           locality = "Oaxaca de Juarez",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Santa Cruz Xoxocotl√°n**]{style="color:#990000"}

```{r vector_hotspots_santa_cruz, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20385_santa_cruz_xoxocotlan_1419_zinb1,
                                 locality = "Santa Cruz Xoxocotl√°n",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Santa Lucia del Camino**]{style="color:#990000"}

```{r vector_hotspots_santa_lucia, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20390_santa_lucia_camino1419_zinb1,
                           locality = "Santa Lucia del Camino",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Matias Romero**]{style="color:#990000"}

```{r vector_hotspots_matias_romero, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20057_matias_romero_1419_zinb1,
                           locality = "Matias Romero Avenda√±o",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Loma Bonita**]{style="color:#990000"}
```{r vector_hotspots_loma_bonita, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20044_loma_bonita_1419_zinb1,
                           locality = "Loma Bonita",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**San Juan Bautista Tuxtepec**]{style="color:#990000"}
```{r vector_hotspots_san_juan, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20184_san_juan_bautista_tuxtepec_1419_zinb1,
                                 locality = "San Juan Bautista Tuxtepec",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Puerto Escondido**]{style="color:#990000"}
```{r vector_hotspots_pto_escondido, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20318_puerto_escondido_1419_zinb1,
                                 locality = "Puerto Escondido",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**San Pedro Pochutla**]{style="color:#990000"}
```{r vector_hotspots_pochutla, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20324_san_pedro_pochutla_1419_zinb1,
                           locality = "San Pedro Pochutla",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Huatulco**]{style="color:#990000"}
```{r vector_hotspots_huatulco, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20413_santa_maria_huatulco_1419_zinb1,
                                 locality = "Santa Maria Huatulco",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Crucesita**]{style="color:#990000"}
```{r vector_hotspots_crucesita, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20413_crucesita1419_zinb1,
                                 locality = "Crucesita",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Santiago de Pinotepa Nacional**]{style="color:#990000"}
```{r vector_hotspots_pinotepa, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20482_santiago_pinotepa_nacional_1419_zinb1,
                                 locality = "Santiago de Pinotepa Nacional",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```


### [**Putla**]{style="color:#990000"}
```{r vector_hotspots_putla, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20073_putla_villa_1419_zinb1,
                           locality = "Putla Villa de Guerrero",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Juchitan**]{style="color:#990000"}
```{r vector_hotspots_juchitan, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20043_juchitan_1419_zinb1,
                           locality = "Heroica Ciudad de Juchitan de Zaragoza",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**San Juan Bautista**]{style="color:#990000"}
```{r vector_hotspots_san_juan_bautista_valle, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = betas_20559_san_juan_bautista_nacional_1419_zinb1,
                           locality = "San Juan Bautista Valle Nacional",
                           cve_edo = "20",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```




:::

# [**Escenarios Epidemiol√≥gicos**]{style="font-size:2pt"}

::: panel-tabset

### [**Oaxaca**]{style="color:#990000"}

```{r risk_ageb_aaxaca}
denhotspots::risk_ageb(betas = betas_20067_oaxaca_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "Oaxaca de Juarez",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```


### [**Pinotepa**]{style="color:#990000"}

```{r risk_ageb_pinotepa}
denhotspots::risk_ageb(betas = betas_20482_santiago_pinotepa_nacional_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "Santiago Pinotepa Nacional",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```

### [**Juchitan**]{style="color:#990000"}

```{r risk_ageb_juchitan}
denhotspots::risk_ageb(betas = betas_20043_juchitan_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "Heroica Ciudad de Juchit√°n de Zaragoza",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```

### [**San Juan Bautista Tuxtepec**]{style="color:#990000"}

```{r risk_ageb_san_juan_bautista_tuxtepec}
denhotspots::risk_ageb(betas = betas_20184_san_juan_bautista_tuxtepec_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "San Juan Bautista Tuxtepec",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```


### [**Puerto Escondido**]{style="color:#990000"}

```{r risk_ageb_pto_escondido}
denhotspots::risk_ageb(betas = betas_20318_puerto_escondido_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "Puerto Escondido",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```

### [**Huatulco**]{style="color:#990000"}

```{r risk_ageb_huatulco}
denhotspots::risk_ageb(betas = betas_20413_santa_maria_huatulco_1419_zinb1,
                       hotspots = denmex::den_hotspots,
                       intensity_perc = 25,
                       locality = "Santa Maria Huatulco",
                       cve_edo = "20") |>
    denhotspots::map_risk(staticmap = FALSE)
```



:::
